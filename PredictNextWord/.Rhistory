main = "The average number of steps")
MaxID <-vector()
for(int ii in length(unique(DF$interval)))
{
if (Mstep[ii] == max(Mstep))
{
MaxId <- unique(DF$interval[ii])
}
}
for(int ii in 1:length(unique(DF$interval)))
{
if (Mstep[ii] == max(Mstep))
{
MaxId <- unique(DF$interval[ii])
}
}
for(int ii in 1:length(unique(DF$interval)))
{
ii
if (Mstep[ii] == max(Mstep))
{
MaxId <- unique(DF$interval[ii])
}
}
MaxID <-vector()
for(int ii in 1:length(unique(DF$interval)))
{
ii
if (Mstep[ii] == max(Mstep))
{
MaxId <- unique(DF$interval[ii])
}
}
for( ii in 1:length(unique(DF$interval)) )
{
ii
if (Mstep[ii] == max(Mstep))
{
MaxId <- unique(DF$interval[ii])
}
}
unique(DF$interval)
for( ii in 1:length(unique(DF$interval)) )
{
if (Mstep[ii] == max(Mstep))
{
MaxId <- unique(DF$interval[ii])
}
}
unique(DF$interval)
intervals <- unique(DF$interval
for( ii in 1:length(unique(DF$interval)) )
{
if (Mstep[ii] == max(Mstep))
{
MaxId <- intervals[ii]
}
}
intervals <- unique(DF$interval)
for( ii in 1:length(unique(DF$interval)) )
{
if (Mstep[ii] == max(Mstep))
{
MaxId <- intervals[ii]
}
}
MaxId
plot(Intevals, Mstep, type = "l" , xlab = "Intervals" , ylab = "Average Number of Steps",
main = "The average number of steps")
sum(DF$steps != NA)
sum(!DF$steps == NA)
str(DF$steps == NA))
sum(!DF$steps == NA))
str(DF$steps == NA)
length(DF$steps == NA))
length(DF$steps == NA)
?is.na
sum(!is.na(DF$steps))
is.na(DF$steps)
sum(is.na(DF$steps))
sum(!is.na(DF$steps))
DF1 <- replace(DF$steps , is.na(DF$steps) , mean(Mstep))
head(DF1)
head(DF)
NewDF <- data.frame(DF1 , DF$date , DF$interval)
head(NewDF)
?weekdays
weekdays(DF$date , abbreviate = FALSE)
weekdays(DF$date[1] , abbreviate = FALSE)
as.Date(Df$data)
as.Date(DF$data)
?weekdays
str(DF$date)
head(DF)
DF <- read.csv('/home/bahar/COURSERA/ReproducibleResearch/RepData_PeerAssessment1/activity.csv' , sep =',' , header = TRUE)
Sstep <-vector()
for (i in unique(DF$date))
{
Sstep <- append(Sstep , sum(DF$steps[DF$date == i] , na.rm = TRUE) )
}
hist(Sstep , main = "Total number of steps taken each day" , xlab = "Number of steps")
mean(Sstep)
median(Sstep)
Mstep <- vector()
for (j in unique(DF$interval))
{
Mstep <- append(Mstep,mean(DF$steps[DF$interval==j] , na.rm = TRUE))
}
plot(unique(DF$interval), Mstep, type = "l" , xlab = "Intervals" , ylab = "Average Number of Steps",
main = "The average number of steps")
max(Mstep)
MaxID <-vector()
intervals <- unique(DF$interval)
for( ii in 1:length(unique(DF$interval)) )
{
if (Mstep[ii] == max(Mstep))
{
MaxId <- intervals[ii]
}
}
str(DF$date)
x <- as.Date(DF$date)
head(x)
head(DF)
weekdays(DF$date)
weekdays(x)
head
head(NewDF)
DF <- read.csv('/home/bahar/COURSERA/ReproducibleResearch/RepData_PeerAssessment1/activity.csv' , sep =',' , header = TRUE)
Sstep <-vector()
for (i in unique(DF$date))
{
Sstep <- append(Sstep , sum(DF$steps[DF$date == i] , na.rm = TRUE) )
}
hist(Sstep , main = "Total number of steps taken each day" , xlab = "Number of steps")
mean(Sstep)
median(Sstep)
Mstep <- vector()
for (j in unique(DF$interval))
{
Mstep <- append(Mstep,mean(DF$steps[DF$interval==j] , na.rm = TRUE))
}
plot(unique(DF$interval), Mstep, type = "l" , xlab = "Intervals" , ylab = "Average Number of Steps",
main = "The average number of steps")
max(Mstep)
MaxID <-vector()
intervals <- unique(DF$interval)
for( ii in 1:length(unique(DF$interval)) )
{
if (Mstep[ii] == max(Mstep))
{
MaxId <- intervals[ii]
}
}
sum(!is.na(DF$steps))
?weekdays
for (jj in 1:length(WeekDay))
{
if (WeekDay[jj] in c("Saturday","Sunday"))
{
WeekDay[jj] <- "weekend"
}
else
{
WeekDay[jj] <- "weekday"
}
}
WeekDay <- as.Date(NewDF$date)
WeekDay <- weekdays(WeekDay)
for (jj in 1:length(WeekDay))
{
if (WeekDay[jj] in c("Saturday","Sunday"))
{
WeekDay[jj] <- "weekend"
}
else
{
WeekDay[jj] <- "weekday"
}
}
for (jj in 1:length(WeekDay))
{
print("here")
jj
if (WeekDay[jj] in c("Saturday","Sunday"))
{
WeekDay[jj] <- "weekend"
}
else
{
WeekDay[jj] <- "weekday"
}
}
length(WeekDay)
WeekDay <- as.Date(NewDF$date)
DF1 <- replace(DF$steps , is.na(DF$steps) , mean(Mstep))
NewDF <- data.frame(DF1 , DF$date , DF$interval)
colnames(NewDF)<- c("steps", "date", "interval")
NSstep <-vector()
for (i in unique(DF$date))
{
NSstep <- append(NSstep , sum(NewDF$steps[NewDF$date == i]) )
}
WeekDay <- as.Date(NewDF$date)
WeekDay <- weekdays(WeekDay)
length(WeekDay)
for (jj in 1:length(WeekDay))
{
if (WeekDay[jj] in c("Saturday","Sunday"))
{
WeekDay[jj] <- "weekend"
}
else
{
WeekDay[jj] <- "weekday"
}
}
WeekDay[1]
c("Saturday","Sunday")
if (WeekDay[jj] in c("Saturday","Sunday"))
head(WeekDay)
for(jj in 1:length(WeekDay))
{
if (WeekDay[jj] =="Saturday" or WeekDay[jj] =="Sunday")
{
WeekDay[jj] <- "weekend"
}
else
{
WeekDay[jj] <- "weekday"
}
}
for(jj in 1:length(WeekDay))
{
if (WeekDay[jj] =="Saturday" | WeekDay[jj] == "Sunday")
{
WeekDay[jj] <- "weekend"
}
else
{
WeekDay[jj] <- "weekday"
}
}
head(NewDF$WeekDay)
for (jj in 1:length(WeekDay))
{
if (WeekDay[jj] =="Saturday" | WeekDay[jj] == "Sunday")
{
WeekDay[jj] <- "weekend"
}
else
{
WeekDay[jj] <- "weekday"
}
}
WeekDay
head(WeekDay)
NewDF$WeekDay <- WeekDay
head(NewDF$WeekDay)
str(NewDF$WeekDay)
NewDF$WeekDay <- factor(WeekDay)
head(NewDF)
str(NewDF$WeekDay)
levels(NewDF$WeekDay) <- c("weekday" , "weekend")
str(NewDF$WeekDay)
AveStep <-vector()
for (i in levels(NewDF$WeekDay))
{
AveStep <- append(AveStep , mean(NewDF$steps[NewDF$WeekDay == i]) )
}
head(AveStep)
AveStep
levels(NewDF$WeekDay)
str(levels(NewDF$WeekDay))
AveStep <-vector()
for (i in levels(NewDF$WeekDay))
{
print("here")
i
AveStep <- append(AveStep , mean(NewDF$steps[NewDF$WeekDay == i]) )
}
head(AveStep)
for (i in levels(NewDF$WeekDay))
{
print("here")
i
AveStep <- append(AveStep , mean(NewDF$steps[NewDF$WeekDay == i]) )
}
head(AveStep)
AveStep <-vector()
for (i in levels(NewDF$WeekDay))
{
print("here")
print(i)
AveStep <- append(AveStep , mean(NewDF$steps[NewDF$WeekDay == i]) )
}
AveStep
NewDF$steps[NewDF$WeekDay == "weekend"]
NewDF$steps[NewDF$WeekDay == "weekday"]
sum(NewDF$WeekDay == "weekend")
weekdays(DF$date)
weekdays(as.Date(DF$date))
WeekDay <- as.Date(NewDF$date)
WeekDay <- weekdays(WeekDay)
for(jj in 1:length(WeekDay))
{
if (WeekDay[jj] =="Saturday" | WeekDay[jj] == "Sunday")
{
print("comes here")
WeekDay[jj] <- "weekend"
}
else
{
WeekDay[jj] <- "weekday"
}
}
sum(WeekDay == "weekend")
sum(WeekDay == "weekend") + sum(WeekDay == "weekday")
NewDF$WeekDay <- factor(WeekDay)
levels(NewDF$WeekDay) <- c("weekday" , "weekend")
sum(NewDF$WeekDay == "weekend")
AveStep <-vector()
for (i in levels(NewDF$WeekDay))
{
AveStep <- append(AveStep , mean(NewDF$steps[NewDF$WeekDay == i]) )
}
head(AveStep)
library(lattice)
?densityplot
densityplot(AveStep~NewDF$interval | NewDF$WeekDay , main="The average number of steps taken" , layout = c(2,1))
densityplot(AveStep~NewDF$interval | NewDF$WeekDay , main="The average number of steps taken" , layout = c(1,2))
densityplot(AveStep~NewDF$interval | NewDF$WeekDay , main="The average number of steps taken" , layout = c(1,2) ,
xlab = "Intervals" , ylab = "Number of steps")
densityplot(AveStep~NewDF$interval | NewDF$WeekDay , main="The average number of steps taken" , layout = c(1,2) ,
xlab = "Intervals" , ylab = "Number of steps" , type="l")
AveStep
AveStep <-vector()
for (i in unique(DF$interval))
{
AveStep <- append(AveStep , mean(NewDF$steps[NewDF$interval==i] ) )
}
AveStep
densityplot(AveStep ~ NewDF$interval | NewDF$WeekDay , main="The average number of steps taken" , layout = c(1,2) ,
xlab = "Intervals" , ylab = "Number of steps" , type="l")
head(AveStep)
xyplot(AveStep ~ NewDF$interval | NewDF$WeekDay , main="The average number of steps taken" , layout = c(1,2) ,
xlab = "Intervals" , ylab = "Number of steps" , type="l")
for (i in unique(NewDF$interval))
for(j in levels(NewDF$WeekDay))
{
{
AveStep <- append(AveStep , mean(NewDF$steps[NewDF$interval==i && NewDF$WeekDay == j] ) )
}
}
xyplot(AveStep ~ NewDF$interval | NewDF$WeekDay , main="The average number of steps taken" , layout = c(1,2) ,
xlab = "Intervals" , ylab = "Number of steps" , type="l")
for (i in unique(NewDF$interval))
{
for(j in levels(NewDF$WeekDay))
{
AveStep <- append(AveStep , mean(NewDF$steps[NewDF$interval==i && NewDF$WeekDay == j] ) )
}
}
xyplot(AveStep ~ NewDF$interval | NewDF$WeekDay , main="The average number of steps taken" , layout = c(1,2) ,
xlab = "Intervals" , ylab = "Number of steps" , type="l")
testdf <- data.frame(1:10)
odev <- vector()
for (i in 1:10)
{
if (i %% 2==0) odev <- append(odev, "even")
else odev <- append(odev, "odd")
}
testdf$odev <- odev
testdf
testdf <- data.frame(nums <- 1:10)
odev <- vector()
for (i in 1:10)
{
if (i %% 2==0) odev <- append(odev, "even")
else odev <- append(odev, "odd")
}
testdf$odev <- odev
testdf
nums <- 1:10
odev <- vector()
for (i in 1:10)
{
if (i %% 2==0) odev <- append(odev, "even")
else odev <- append(odev, "odd")
}
testdf <- data.frame(nums , odev)
testdf
interval <- c(0, 1,2, 0, 1, 2, 0, 1 , 2, 0)
testinterval <- c(0, 1,2, 0, 1, 2, 0, 1 , 2, 0)
testdf$interval <- testinterval
testdf
library(lattice)
xyplot(testdf$nums ~ testdf$testinterval | testdf$odev , main="The average number of steps taken" , layout = c(1,2) ,
xlab = "Intervals" , ylab = "Number of steps" , type="l")
xyplot(testdf$nums ~ testdf$testinterval | testdf$odev , main="The average number of steps taken" , layout = c(1,2) ,
xlab = "Intervals" , ylab = "Number of steps" )
xyplot(testdf$nums ~ testdf$testinterval, main="The average number of steps taken"  ,
xlab = "Intervals" , ylab = "Number of steps" )
?xyplot
xyplot(testdf$nums ~ testdf$testinterval, testdf , main="The average number of steps taken"  ,
xlab = "Intervals" , ylab = "Number of steps" )
?xyplot
str(testdf$nums)
xyplot(testdf$nums ~ testdf$tinterval, testdf , main="The average number of steps taken"  ,
xlab = "Intervals" , ylab = "Number of steps" )
testdf
testdf$tinterval <- testinterval
xyplot(testdf$nums ~ testdf$tinterval, testdf , main="The average number of steps taken"  ,
xlab = "Intervals" , ylab = "Number of steps" )
xyplot(testdf$nums ~ testdf$tinterval, testdf , main="The average number of steps taken"  ,
xlab = "Intervals" , ylab = "Number of steps"  , type='l')
xyplot(testdf$nums ~ testdf$tinterval, main="The average number of steps taken"  ,
xlab = "Intervals" , ylab = "Number of steps"  , type='l')
xyplot(testdf$nums ~ testdf$tinterval | testdf$odev , main="The average number of steps taken"  ,
xlab = "Intervals" , ylab = "Number of steps"  , type='l' , layout = c(2,1))
xyplot(testdf$nums ~ testdf$tinterval | testdf$odev , main="The average number of steps taken"  ,
xlab = "Intervals" , ylab = "Number of steps"  , type='l' , layout = c(1,2))
mmm <- vector()
for (i in unique(testdf$tinterval))
{
for(t in c("odd" , "even"))
{
mmm <- append(mmm, mean(testdf$nums[testdf$tinterval == i && testdf$odev == t]))
}
}
xyplot(mmm ~ testdf$tinterval | testdf$odev , main="The average number of steps taken"  ,
xlab = "Intervals" , ylab = "Number of steps"  , type='l' , layout = c(1,2))
dim(testdf)
mmm <- vector()
mmint <- vector()
mmod <- vector()
for (i in unique(testdf$tinterval))
{
for(t in c("odd" , "even"))
{
mmm <- append(mmm, mean(testdf$nums[testdf$tinterval == i && testdf$odev == t]))
mmint <- append(mmint , i)
mmod <- append(mmod , t)
}
}
mmdf <- data.frame(mmm , mmint , mmod)
mmf
mmdf
mmm
library(ElemStatLearn)
data(vowel.train)
training <- vowel.train
testing <- vowel.test
names(testing)
str(training$y)
training$y <- as.factor(training$y)
str(training$y)
testing$y <- as.factor(testing$y)
set.seed(33833)
library(caret)
fit1 <- train(training$y ~. , data= training , method='rf')
fit2 <- train(training$y ~. , data= training , method='gbm')
test1 <- predict(fit1 , newdata = testing)
test2 <- predict(fit2 , newdata = testing)
acc1 <- confusionMatrix(test1 , testing$y)
acc1
acc2 <- confusionMatrix(test2 , testing$y)
acc2$overall
dataf <- data.frame(test1, test2, testing$y)
View(dataf)
acc <- sum(dataf$test1 == dataf$test2 & , dataf$test1 == dataf$testing.y)
acc <- sum(dataf$test1 == dataf$test2 &  dataf$test1 == dataf$testing.y)
sum(dataf$test1 == dataf$test2)
sum(dataf$test1 == dataf$test2 &  dataf$test1 == dataf$testing.y)/sum(dataf$test1 == dataf$test2)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis, predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[inTrain, ]
testing = adData[-inTrain, ]
str(AlzheimerDisease)
data(AlzheimerDisease)
str(data(AlzheimerDisease))
AlzheimerDisease
data(AlzheimerDisease)
dd <- data(AlzheimerDisease)
View(adData)
data(AlzheimerDisease)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[inTrain, ]
testing = concrete[-inTrain, ]
set.seed(233)
mod_lasso <- train(CompressiveStrength ~ ., data = training, method = "lasso")
library(elasticnet)
mod_lasso
plot.enet(mod_lasso$finalModel )
plot.enet(mod_lasso$finalModel , xvar = "penalty")
setwd("/home/bahar/projects/NextWord")
library(shiny)
runApp()
setwd("/home/bahar/projects/NextWord/PredictNextWord")
runApp()
runApp()
shiny::runApp()
library(shinyapps)
shiny::runApp()
deployApp()
